rd_("BlAlias for <code>PhysAddr::from_usize</code>.BlAlias for <code>VirtAddr::from_usize</code>.AeThe maximum duration.BjGet a flags value with all known bits set.BgARM Generic Interrupt Controller (GIC).BaInterrupt request (IRQ) handling.AlPhysical memory information.CcCreates a new handler table with all entries empty.DcCreates a new <code>Aligned4K</code> instance with the given value.DjCreates a new <code>Duration</code> from the specified number of whole \xe2\x80\xa6DgThe bitwise negation (<code>!</code>) of the bits in a flags value, \xe2\x80\xa6GkCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is \xe2\x80\xa6CeThe intersection of a source flags value with the \xe2\x80\xa6AkFree memory for allocation.iReadable.AhA duration of zero time.AnGet the underlying bits value.AoReturns the argument unchanged.0000000AhPlatform initialization.BfInitialize with the given PSCI method.BaCalls <code>U::from(self)</code>.0000000BfYield a set of contained flags values.CkMarks a function to be called on the primary core after \xe2\x80\xa60BiThe region name, used for identification.BgARM Power State Coordination Interface.B`The size in bytes of the region.AhTime-related operations.AiIRQ management interface.AjPhysical memory interface.AgSend to a specific CPU.iWritable.D`The bitwise or (<code>|</code>) of the bits in two flags values.BfGet a flags value with all bits unset.CbThe region flags, see <code>MemRegionFlags</code>.BiThe start physical address of the region.kPL011 UART.BcPL031 Real Time Clock (RTC) driver.AaPower management.6BcDevice memory. (e.g., MMIO regions)BbPlatform initialization interface.AkThe duration of one second.AhTime-related interfaces.BnConverts the virtual address to a raw pointer.faxplatDeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa6AnThe CPU ID of the current CPU.AmThe CPU ID of the target CPU.1CmPower up a core. This call is used to power up cores that \xe2\x80\xa6D`The bitwise or (<code>|</code>) of the bits in each flags value.A`Handles the IRQ.0BgHandles the event with the given index.D`The bitwise or (<code>|</code>) of the bits in two flags values.CcWhether all known bits in this flags value are set.CeThe intersection of a source flags value with the \xe2\x80\xa69AhSend to the current CPU.kExecutable.AkPower management interface.DbReturns the number of <em>whole</em> seconds contained by this \xe2\x80\xa6AiConsole input and output.AiThe total number of CPUs.CnPower down the calling core. This call is intended for use \xe2\x80\xa6CbDivides <code>Duration</code> by <code>f32</code>.CbDivides <code>Duration</code> by <code>f64</code>.DkReads a byte from the console, or returns <code>None</code> if no input \xe2\x80\xa6CiReturns true if this <code>Duration</code> spans no time.CeMultiplies <code>Duration</code> by <code>f32</code>.CeMultiplies <code>Duration</code> by <code>f64</code>.CfCreates a RAM region with default flags (readable, \xe2\x80\xa6AmWrites a byte to the console.Ciboot argument. This is typically the device tree blob \xe2\x80\xa6DgA <code>Duration</code> type to represent a span of time, typically \xe2\x80\xa6AjA physical memory address.BkReserved memory, do not use for allocation.BiThe raw memory range with start and size.BfUncachable memory. (e.g., framebuffer)AiA virtual memory address.EbComputes the absolute difference between <code>self</code> and <code>other</code>.CmReturns the total number of nanoseconds contained by this \xe2\x80\xa6CkConverts an <code>PhysAddr</code> to an <code>usize</code>.CkConverts an <code>VirtAddr</code> to an <code>usize</code>.CmWhether all set bits in a source flags value are also set \xe2\x80\xa6CnBootstraps the given CPU core with the given initial stack \xe2\x80\xa60oInitializes GICBoWhether all bits in this flags value are unset.CgCreates a MMIO region with default flags (readable, \xe2\x80\xa6BkRegisters an IRQ handler for the given IRQ.0CmSends an inter-processor interrupt (IPI) to the specified \xe2\x80\xa600C`A wrapper type for aligning a value to 4K bytes.BcConsole input and output interface.CkTarget specification for inter-processor interrupts (IPIs).BbA measurement of the system clock.ClReturns the total number of whole microseconds contained \xe2\x80\xa6ClReturns the total number of whole milliseconds contained \xe2\x80\xa6CfConverts the virtual address to a raw pointer of a \xe2\x80\xa6BdBusy waiting for the given duration.DdCall the function decorated by <code>axplat::main</code> for the \xe2\x80\xa6AjConvert from a bits value.DfCreates a new <code>Duration</code> from the specified number of days.D`The bitwise or (<code>|</code>) of the bits in each flags value.DdCreates a new <code>Duration</code> from the specified number of \xe2\x80\xa6ClGet a flags value with the bits of a flag with the given \xe2\x80\xa6DjCreates a new <code>Duration</code> from the specified number of whole \xe2\x80\xa6B`Initializes GICC (for all CPUs).CgReturns the time elapsed since epoch (also known as \xe2\x80\xa6AkThe type if an IRQ handler.AoThe duration of one nanosecond.BeThe error type for overlapping check.CfConverts the virtual address to a mutable raw pointer.DgThe bitwise negation (<code>!</code>) of the bits in a flags value, \xe2\x80\xa6CeThe intersection of a source flags value with the \xe2\x80\xa6DgCreates a new <code>Duration</code> from the specified number of hours.;CkConverts an <code>usize</code> to an <code>PhysAddr</code>.CkConverts an <code>usize</code> to an <code>VirtAddr</code>.DgCreates a new <code>Duration</code> from the specified number of weeks.A`Handles the IRQ.CgInitializes the platform at the early stage for the \xe2\x80\xa60CgEarly stage initialization: stores the timer frequency.CdEarly stage initialization of the PL011 UART driver.BmEarly stage initialization of the RTC driver.CgInitializes the platform at the later stage for the \xe2\x80\xa60CmWhether any set bits in a source flags value are also set \xe2\x80\xa6BlYield a set of contained named flags values.CjReads bytes from the console into the given mutable slice.0CnReads bytes from the console into the given mutable slice. \xe2\x80\xa6BbEnables or disables the given IRQ.00?AjShutdown the whole system.0BnShutdown the whole system, including all CPUs.BnUnregisters the IRQ handler for the given IRQ.0B`The duration of one microsecond.B`The duration of one millisecond.DiReturns the number of seconds contained by this <code>Duration</code> \xe2\x80\xa60DoChecked <code>Duration</code> addition. Computes <code>self + other</code>, \xe2\x80\xa6DoChecked <code>Duration</code> division. Computes <code>self / other</code>, \xe2\x80\xa6EeChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, \xe2\x80\xa6EbChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, \xe2\x80\xa6AhEnable timer interrupts.DdCreates a new <code>Duration</code> from the specified number of \xe2\x80\xa60CaCreates a new virtual address from a raw pointer.A`UART IRQ HandlerDhDefault implementation of <code>axplat::irq::IrqIf</code> using the GIC.ChReturns all device memory (MMIO) ranges on the platform.0BbWrites given bytes to the console.0BfWrite a slice of bytes to the console.ClLock for console operations to prevent mixed output from \xe2\x80\xa6BdA lock-free table of event handlers.BcThe size of a 4K page (4096 bytes).D`The bitwise or (<code>|</code>) of the bits in two flags values.DeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.CgCreates a reserved memory region with default flags \xe2\x80\xa6CcTranslates a physical address to a virtual address.0DaReturns the fractional part of this <code>Duration</code>, in \xe2\x80\xa6DiDefault implementation of <code>axplat::time::TimeIf</code> using the \xe2\x80\xa6CcTranslates a virtual address to a physical address.0BbNumber of nanoseconds in a second.AiA physical memory region.ChReturns the number of milliseconds contained by this \xe2\x80\xa60CnConverts the virtual address to a mutable raw pointer of a \xe2\x80\xa6CmChecks that two strings are equal. If they are not equal, \xe2\x80\xa6maxplat-macros;DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa6AoSimple console print operation.CaReturns the current clock time in hardware ticks.00DdCreates a new <code>Duration</code> from the specified number of \xe2\x80\xa60AbARM Generic Timer.DgReturns the fractional part of this <code>Duration</code>, in whole \xe2\x80\xa60BcNumber of microseconds in a second.BcNumber of milliseconds in a second.BfThe flags of a physical memory region.DeReturns the time elapsed since system boot in <code>TimeValue</code>.BgConverts nanoseconds to hardware ticks.00EbSaturating <code>Duration</code> addition. Computes <code>self + other</code>, \xe2\x80\xa6EhSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, \xe2\x80\xa6EeSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, \xe2\x80\xa6CnMarks a function to be called on the secondary cores after \xe2\x80\xa60BgConverts hardware ticks to nanoseconds.00CjReturns the total size of physical memory (RAM) on the \xe2\x80\xa6BoBusy waiting until reaching the given deadline.DkDefault implementation of <code>axplat::console::ConsoleIf</code> using \xe2\x80\xa6BoSimple console print operation, with a newline.CiCreates a new virtual address from a mutable raw pointer.CiReturns all physical memory (RAM) ranges on the platform.0CjReturns nanoseconds elapsed since epoch (also known as \xe2\x80\xa6AgSend to all other CPUs.BgNumber of nanoseconds in a microsecond.BgNumber of nanoseconds in a millisecond.EdDivides <code>Duration</code> by <code>Duration</code> and returns <code>f32</code>.EdDivides <code>Duration</code> by <code>Duration</code> and returns <code>f64</code>.BbConvert from a bits value exactly.BhRegisters a handler for the given index.BkRegisters an IRQ handler for the given IRQ.CkThe default flags for a normal memory region (readable, \xe2\x80\xa6CkReturn epoch offset in nanoseconds (wall time offset to \xe2\x80\xa600CbRemoves a portion of ranges from the given ranges.AeSet a one-shot timer.00CbThe checked version of <code>from_secs_f32</code>.CbThe checked version of <code>from_secs_f64</code>.ClThe default flags for a MMIO region (readable, writable, \xe2\x80\xa6CfConvert from a bits value, unsetting any unknown bits.BlUnregisters the handler for the given index.BnUnregisters the IRQ handler for the given IRQ.DjCall the function decorated by <code>axplat::secondary_main</code> for \xe2\x80\xa6BeImplement the interface for a struct.CmInitializes the platform at the early stage for secondary \xe2\x80\xa60CmInitializes the platform at the later stage for secondary \xe2\x80\xa60BnReturns nanoseconds elapsed since system boot.DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa6CmThe default flags for a reserved memory region (readable, \xe2\x80\xa6CfReturns all reserved physical memory ranges on the \xe2\x80\xa60Ajaxplat-aarch64-peripheralsBkChecks if the given ranges are overlapping.")